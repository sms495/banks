import pytest

from src.masks import get_mask_account, get_mask_card_number


@pytest.mark.parametrize(
    "card_number, card_result",
    [
        ("2000222222222334", "2000 22** **** 2334"),
        ("1234567890123456", "1234 56** **** 3456"),
        ("0000 0000 0000 0000", "Номер карты введен неправильно"),
        ("2000.2222.2222.2334", "Номер карты введен неправильно"),
        ("2O00222222222334", "Номер карты введен неправильно"),
        ("2000222222222334.", "Номер карты введен неправильно"),
        ("2200222200000006", "2200 22** **** 0006"),
        ("9999999999999999", "9999 99** **** 9999"),
        ("0000000000000000", "0000 00** **** 0000"),
        ("1234567890", "Номер карты введен неправильно"),
        ("0000111111567890", "0000 11** **** 7890"),
        ("1234-5678-9012-3456", "Номер карты введен неправильно"),
        ("", "Номер карты введен неправильно"),
        ("12345aaaa67890", "Номер карты введен неправильно"),
        ("ффффффффффффффффф", "Номер карты введен неправильно"),
        ("AAAAAAAAAAAAAAAA", "Номер карты введен неправильно"),
        ("[][[][][][][][][][]]", "Номер карты введен неправильно"),
        ("11111111111117890", "Номер карты введен неправильно"),
        ("11111111111117-0", "Номер карты введен неправильно"),
        ("6831982476737658", "6831 98** **** 7658"),
        ("8990922113665229", "8990 92** **** 5229"),
        ("5999414228426353", "5999 41** **** 6353"),
        (" 5999414228426354", "5999 41** **** 6354"),
        ("5999414228426355 ", "5999 41** **** 6355"),
        (" 5999414228426356 ", "5999 41** **** 6356"),
        ("        5999414228426356", "5999 41** **** 6356"),
        ("5999414228426356        ", "5999 41** **** 6356"),
        ("           5999414228426356       ", "5999 41** **** 6356"),
    ],
)
def test_mask_card_number(card_number: str, card_result: str) -> None:
    """Функция, принимает на вход номер карты и возвращает ее маску."""
    assert get_mask_card_number(card_number) == card_result


@pytest.mark.parametrize(
    "count_number, count_result",
    [
        ("12345678901234567890", "**7890"),
        ("34567654345677765433", "**5433"),
        ("22222222222222222222", "**2222"),
        ("99999999999999999999", "**9999"),
        ("00000000000000000000", "**0000"),
        ("00000000000000001234", "**1234"),
        ("123456789O1234567890", "Номер счета введен неправильно"),
        ("12345.67890.12345.67890", "Номер счета введен неправильно"),
        ("12345678901234567890.", "Номер счета введен неправильно"),
        ("987654321908765555", "Номер счета введен неправильно"),
        ("987654aaaaaaaaa65555", "Номер счета введен неправильно"),
        ("3333333333333333333333333333", "Номер счета введен неправильно"),
        ("3333 3333 33333 33333 33333333333", "Номер счета введен неправильно"),
        ("3333 33333 33333 33333 33333", "Номер счета введен неправильно"),
        ("[][][][][][][][]]5", "Номер счета введен неправильно"),
        ("", "Номер счета введен неправильно"),
        ("фффффффффффффффффффф", "Номер счета введен неправильно"),
        ("AAAAAAAAAAAAAAAAAAA", "Номер счета введен неправильно"),
        ("00000000000000001--4", "Номер счета введен неправильно"),
        ("9876543219087655553333", "Номер счета введен неправильно"),
        ("64686473678894779589", "**9589"),
        ("35383033474447895560", "**5560"),
        ("73654108430135874305", "**4305"),
        (" 73654108430135874306", "**4306"),
        ("73654108430135874307 ", "**4307"),
        (" 73654108430135874308 ", "**4308"),
        ("     35383033474447895560", "**5560"),
        ("35383033474447895560          ", "**5560"),
        ("         35383033474447895560       ", "**5560"),
    ],
)
def test_mask_account(count_number: str, count_result: str) -> None:
    """Функция, принимает на вход номер счёта и возвращает его маску."""
    assert get_mask_account(count_number) == count_result
